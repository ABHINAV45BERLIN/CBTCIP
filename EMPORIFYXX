
const Order = require("../models/orderModel");
const Product = require("../models/productModels");
const ErrorHander = require("../utils/errorhander");
const catchAsyncErrors = require("../middleware/catchAsyncErrors");

//to create new order 

exports.newOrder =  catchAsyncErrors(async(req,res,next)=>{
     const {
        shippingInfo,
        orderItems,
        paymentInfo,
        itemsPrice,
        taxPrice,
        shippingPrice,
        totalPrice,
     } = req.body;



     const order = await Order.create({
        shippingInfo,
        orderItems,
        paymentInfo,
        itemsPrice,
        taxPrice,
        shippingPrice,
        totalPrice,
        paidAt: Date.now(),
        user: req.user._id,
      });


      res.status(201).json({
        success:true,
        order,
      });




});


// get Single Order
exports.getSingleOrder = catchAsyncErrors(async (req, res, next) => {
    const order = await Order.findById(req.params.id).populate(
      "user",
      "name email"
    );
  
    if (!order) {
      return next(new ErrorHander("Order not found with this Id", 404));
    }
  
    res.status(200).json({
      success: true,
      order,
    });
  });


  // get logged in user  Orders
exports.myOrders = catchAsyncErrors(async (req, res, next) => {
    const orders = await Order.find({ user: req.user._id });
      

    
     
    

    res.status(200).json({
      success: true,
      orders,
    });


  });


  // get all Orders -- Admin
exports.getAllOrders = catchAsyncErrors(async (req, res, next) => {
    const orders = await Order.find();
  
    let totalAmount = 0;
  
    orders.forEach((order) => {
      totalAmount += order.totalPrice;
    });
  
    res.status(200).json({
      success: true,
      totalAmount,
      orders,
    });
  });
  
  // update Order Status -- Admin
  exports.updateOrder = catchAsyncErrors(async (req, res, next) => {
    const order = await Order.findById(req.params.id);
  
    if (!order) {
      return next(new ErrorHander("Order not found with this Id", 404));
    }
  
    if (order.orderStatus === "Delivered") {
      return next(new ErrorHander("You have already delivered this order", 400));
    }
  
    if (req.body.status === "Shipped") {
      order.orderItems.forEach(async (o) => {
        await updateStock(o.product, o.quantity);
      });
    }
    order.orderStatus = req.body.status;
  
    if (req.body.status === "Delivered") {
      order.deliveredAt = Date.now();
    }
  
    await order.save({ validateBeforeSave: false });
    res.status(200).json({
      success: true,
    });
  });
  
  async function updateStock(id, quantity) {
    const product = await Product.findById(id);
  
    product.Stock -= quantity;
  
    await product.save({ validateBeforeSave: false });
  }
  
  // delete Order -- Admin
  exports.deleteOrder = catchAsyncErrors(async (req, res, next) => {
    const order = await Order.findById(req.params.id);
  
    if (!order) {
      return next(new ErrorHander("Order not found with this Id", 404));
    }
  
    await order.deleteOne();
     
    res.status(200).json({
      success: true,
      message :"order has been deleted",
    });
  });


const Product = require("../models/productModels");
const ErrorHander = require("../utils/errorhander");
const catchAsyncErrors  = require("../middleware/catchAsyncErrors");
const ApiFeatures = require("../utils/apifeatures");







//create product -- ADMIN


exports.createProduct = catchAsyncErrors(async(req,res,next)=>{
    req.body.user = req.user.id;


    const product  = await Product.create(req.body);


    res.status(210).json({
         success:true,
         product
    })
});

//GET ALL PRODUCT

exports.getAllProducts = catchAsyncErrors(async(req,res)=>{

    const resultPerPage = 5;
    const productCount = await Product.countDocuments();

   
    const apiFeature = new ApiFeatures(Product.find(),req.query)
    .search()
    .filter()
    .pagination(resultPerPage);

    

    const product = await apiFeature.query;

     

    res.status(200).json({
        success:true,
         product,
         productCount
         
         
         
    })


});


//update product -- admin route

exports.updateProduct = catchAsyncErrors(async(req,res,next)=>{

    let product = await Product.findById(req.params.id);

    if(!product){
        return res.status(500).json({
       
            success:false,
            message:"Product not found"
             

        })
        

    }

    product =  await Product.findByIdAndUpdate(req.params.id,req.body,{
        new:true,
        runValidators:true,
        useFindandModify:false});

        res.status(200).json({
            success:true,
            product

        })

});


//GET  PRODUCT DETAILS

exports.getProductDetails = catchAsyncErrors(async(req,res,next)=>{

    const product =  await Product.findById(req.params.id);
 
    if(!product){
           return next(new ErrorHander("Product not found",404));
     }
 
     res.status(200).json({
         success:true,
         product
     })
     
 
 });






// delete product

exports.deleteProduct  =  catchAsyncErrors(async(req,res,next)=>{

    const product =  await Product.findById(req.params.id);
       
      if(!product){

          return res.status(500).json({
          success:false,
           message:"Product not found"
         })
}
    await product.deleteOne();

    res.status(200).json({
        success:true,
        message:"Product Removed"
    })

}
);

//PRODUCT REVEIWS BY CUSTOMER

exports.createProductReview = catchAsyncErrors(async(req,res,next)=>{
   
    const {rating,comment,productId} = req.body;

    const review = {
        user: req.user._id,
        name: req.user.name,
        rating: Number(rating),
        comment,
      };
    




      const product = await Product.findById(productId);
  
      console.log(product)


      const isReviewed = product.reviews.find(
        (rev) => rev.user.toString() === req.user._id.toString()
      );
      

      
      if (isReviewed) {
        product.reviews.forEach((rev) => {
          if (rev.user.toString() === req.user._id.toString())
            (rev.rating = rating), (rev.comment = comment);
        });
      } else {
        product.reviews.push(review);
        product.numOfReviews = product.reviews.length;
      }


      let avg = 0;

      product.reviews.forEach((rev) => {
        avg += rev.rating;
      });
    
      product.ratings = avg / product.reviews.length;
     
      
      
      await product.save({ validateBeforeSave: false });
    
      res.status(200).json({
        success: true,
       
      });
    
      
})
//get all review of the product
exports.getProductsReviews = catchAsyncErrors(async(req,res,next)=>{
   
 const product = await Product.findById(req.query.id);
 console.log(product);

if(!product){
  return new ErrorHander("product not found",404);
}

res.status(200).json({
  success:true,
  reviews:product.reviews,

})

   
})

//delete reviews


exports.deleteReview = catchAsyncErrors(async (req, res, next) => {
  const product = await Product.findById(req.query.productId);

  if (!product) {
    return next(new ErrorHander("Product not found", 404));
  }

  const reviews = product.reviews.filter(
    (rev) => rev._id.toString() !== req.query.id.toString()
  );

  let avg = 0;

  reviews.forEach((rev) => {
    avg += rev.rating;
  });

  let ratings = 0;

  if (reviews.length === 0) {
    ratings = 0;
  } else {
    ratings = avg / reviews.length;
  }

  const numOfReviews = reviews.length;

  await Product.findByIdAndUpdate(
    req.query.productId,
    {
      reviews,
      ratings,
      numOfReviews,
    },
    {
      new: true,
      runValidators: true,
      useFindAndModify: false,
    }
  );

  res.status(200).json({
    success: true,
  });
});



const ErrorHander = require("../utils/errorhander");
const catchAsyncErrors = require("../middleware/catchAsyncErrors");
const User = require("../models/userModel");
const sendToken = require("../utils/jwtToken");
const sendEmail = require("../utils/sendEmail");
const crypto = require("crypto");
// const cloudinary = require("cloudinary");




// registering  a new user

exports.registerUser = catchAsyncErrors(async(req,res,next)=>{

   const{name,email,password}  = req.body;


   const user = await User.create({
    name,email,password,
    avatar:{
        public_id:"this is a sample id",
        url:"profilepicUrl"
    },
   });


  
   sendToken(user,201,res);


});


//login function
exports.loginUser = catchAsyncErrors(async(req,res,next)=>{
    
   const{email,password} =  req.body;


   //checking if user have given both email and password 

   if(!email || !password){
    return next(new ErrorHander("Please enter email and password",400));
   }


   const user = await User.findOne({email}).select("+password");

     

   if(!user){
    return next(new ErrorHander("invalid email or password",401));


   }

  
   const isPasswordMatched  = await user.comparePassword(password)
   

   if(!isPasswordMatched){
    return next(new ErrorHander("invalid email or password",401));

    
   }
   

   sendToken(user,200,res);


});



//logout method

exports.logout = catchAsyncErrors(async(req,res,next)=>{


   res.cookie("token",null,{
      expires: new Date(Date.now()),
      httpOnly: true,
   })
    
       res.status(200).json({
         success:true,
         message:"Logged out"
       });
  
});


//forgot password

exports.forgotPassword = catchAsyncErrors(async (req, res, next) => {
   const user = await User.findOne({ email: req.body.email });
 
   if (!user) {
     return next(new ErrorHander("User not found", 404));
   }
 
   // Get ResetPassword Token
   const resetToken = user.getResetPasswordToken();
 
   await user.save({ validateBeforeSave: false });
 
   const resetPasswordUrl = `${req.protocol}://${req.get(
     "host"
   )}/api/v1/password/reset/${resetToken}`;
 
   const message = `Your password reset token is :- \n\n ${resetPasswordUrl} \n\nIf you have not requested this email then, please ignore it.`;
 
   try {
     await sendEmail({
       email: user.email,
       subject: `Ecommerce Password Recovery`,
       message,
     });



 
     res.status(200).json({
       success: true,
       message: `Email sent to ${user.email} successfully`,
     });
   } catch (error) {
     user.resetPasswordToken = undefined;
     user.resetPasswordExpire = undefined;
 
     await user.save({ validateBeforeSave: false });
 
     return next(new ErrorHander(error.message, 500));
   }
 });
 
//reset password
 exports.resetPassword = catchAsyncErrors(async (req, res, next) => {
        
   
   //creating token hash

   const resetPasswordToken = crypto
   .createHash("sha256")
   .update(req.params.token)
   .digest("hex");

  const user = await User.findOne({
   resetPasswordToken,
   resetPasswordExpire: { $gt: Date.now() },
 });


if(!user){
   return next(new ErrorHander("Reset password token is invalid or has been expired",400));
}

if (req.body.password !== req.body.confirmPassword) {
   return next(new ErrorHander("Password does not match with password", 400));
 }



user.password = req.body.password;
user.resetPasswordToken = undefined;
user.resetPasswordExpire = undefined;

await user.save();


sendToken(user,200,res);


 });


 //get user details
 exports.getUserDetails =  catchAsyncErrors(async(req,res,next)=>{

   const user = await User.findById(req.user.id);

   res.status(200).json({
    success:true,
    user,
   });


 })

 //update user password
 exports.updatePassword =  catchAsyncErrors(async(req,res,next)=>{

  const user = await User.findById(req.user.id).select("+password");
  
  
  const isPasswordMatched  = await user.comparePassword(req.body.oldPassword)
   

  if(!isPasswordMatched){
   return next(new ErrorHander("old password does not match with new password",400));

   
  }

  if(req.body.newPassword != req.body.confirmPassword){
       return next(new Errorhander("new password and confirm password does not match",400))
  }

  user.password = req.body.newPassword;

  await user.save();

 sendToken(user,200,res)


})


//update user profile

exports.updateProfile = catchAsyncErrors(async (req, res, next) => {
  const newUserData = {
    name: req.body.name,
    email: req.body.email,
  };

  // if (req.body.avatar !== "") {
  //   const user = await User.findById(req.user.id);

  //   const imageId = user.avatar.public_id;

  //   await cloudinary.v2.uploader.destroy(imageId);

  //   const myCloud = await cloudinary.v2.uploader.upload(req.body.avatar, {
  //     folder: "avatars",
  //     width: 150,
  //     crop: "scale",
  //   });

  //   newUserData.avatar = {
  //     public_id: myCloud.public_id,
  //     url: myCloud.secure_url,
  //   };
  // }

  const user = await User.findByIdAndUpdate(req.user.id, newUserData, {
    new: true,
    runValidators: true,
    useFindAndModify: false,
  });

  res.status(200).json({
    success: true,
  });
});

//get all user (admin)
exports.getAllUser  =  catchAsyncErrors(async(req,res,next)=>{
   
  const users  = await User.find();

  res.status(200).json({
    success:true,
    users,
  })


});


//get single user (admin)
exports.getSingleUser  =  catchAsyncErrors(async(req,res,next)=>{
   
  const user  = await User.findById(req.params.id);

  


  if(!user){
    return next(new ErrorHander(`user does not exist with id ${req.params.id}`));
  }

  res.status(200).json({
    success:true,
    user,
  })


});





//UPDATE USER ROLE---admin

exports.updateRole = catchAsyncErrors(async (req, res, next) => {
  const newUserData = {
    name: req.body.name,
    email: req.body.email,
    role:req.body.role,
  };

  const user = await User.findByIdAndUpdate(req.params.id, newUserData, {
    new: true,
    runValidators: true,
    useFindAndModify: false,
  });

  res.status(200).json({
    success: true,
  });
});





//delete user ---admin
exports.deleteUser = catchAsyncErrors(async (req, res, next) => {
  

  const user = User.findById(req.params.id) ;

  if (!user) {
    return next(
      new ErrorHander(`User does not exist with Id: ${req.params.id}`, 400)
    );
  }

  console.log(user);

  await user.deleteOne();
  

  
  res.status(200).json({
    success: true,
    message:"user deleted succesfully",
  });
});



